<?xml version="1.0" encoding="utf-8"?>
<CodeFile>
  <Class ClassName="AjaxCall">
    <Params>
      <Param>destURL</Param>
      <Param>rootURL</Param>
      <Param>requestSrc</Param>
      <Param>testElem</Param>
    </Params>
    <ConstructorBody>
      <Code>this.DestURL = destURL;</Code>
      <Code>this.ClientID = getQueryParam("ClientID");</Code>
      <Code>this.IATName = getQueryParam("IATName");</Code>
      <Code>this.rootURL = rootURL;</Code>
      <Code>this.requestSrc = requestSrc;</Code>
      <Code>this.testElem = testElem;</Code>
      <Code>return this;</Code>
    </ConstructorBody>
    <PrototypeChain>
      <Function FunctionName="buildRequestDocument">
        <Params>
          <Param>request</Param>
          <Param>requestData</Param>
          <Param>verifiableFiles</Param>
          <Param>requestRelTo</Param>
          <Param>requestType</Param>
        </Params>
        <FunctionBody>
          <Code>var xmlDoc = document.implementation.createDocument("", "AjaxRequest", null);</Code>
          <Code>var elem = xmlDoc.createElement("Request");</Code>
          <Code>xmlDoc.documentElement.setAttribute("RequestType", requestType);</Code>
          <Code>if (requestRelTo != null)</Code>
          <Code>xmlDoc.documentElement.setAttribute("RequestRelTo", requestRelTo);</Code>
          <Code>this.requestString = request;</Code>
          <Code>elem.appendChild(xmlDoc.createTextNode(request));</Code>
          <Code>xmlDoc.documentElement.appendChild(elem);</Code>
          <Code>var elem = xmlDoc.createElement("RequestData");</Code>
          <Code>elem.appendChild(xmlDoc.createCDATASection(requestData));</Code>
          <Code>xmlDoc.documentElement.appendChild(elem);</Code>
          <Code>elem = xmlDoc.createElement("ClientID");</Code>
          <Code>elem.appendChild(xmlDoc.createTextNode(parseInt(this.ClientID, 10)));</Code>
          <Code>xmlDoc.documentElement.appendChild(elem);</Code>
          <Code>elem = xmlDoc.createElement("IATName");</Code>
          <Code>elem.appendChild(xmlDoc.createTextNode(this.IATName));</Code>
          <Code>xmlDoc.documentElement.appendChild(elem);</Code>
          <Code>elem = xmlDoc.createElement("Host");</Code>
          <Code>elem.appendChild(xmlDoc.createTextNode(window.location.hostname));</Code>
          <Code>xmlDoc.documentElement.appendChild(elem);</Code>
          <Code>elem = xmlDoc.createElement("RootContext");</Code>
          <Code>elem.appendChild(xmlDoc.createTextNode(this.rootURL));</Code>
          <Code>xmlDoc.documentElement.appendChild(elem);</Code>
          <Code>elem = xmlDoc.createElement("RequestSource");</Code>
          <Code>elem.appendChild(xmlDoc.createTextNode(this.requestSrc));</Code>
          <Code>xmlDoc.documentElement.appendChild(elem);</Code>
          <Code>elem = xmlDoc.createElement("TestElement");</Code>
          <Code>elem.appendChild(xmlDoc.createTextNode(this.testElem));</Code>
          <Code>xmlDoc.documentElement.appendChild(elem);</Code>
          <Code>var resourcesElem = xmlDoc.createElement("Resources");</Code>
          <Code>var scriptElems = document.getElementsByTagName("script");</Code>
          <Code>var currScriptElem = scriptElems[0];</Code>
          <Code>for (var ctr = 0; ctr &lt; scriptElems.length; ctr++) {</Code>
          <Code>elem = xmlDoc.createElement("Resource");</Code>
          <Code>elem.setAttribute("SourceType", "URL");</Code>
          <Code>while (currScriptElem.nodeType != 1)</Code>
          <Code>currScriptElem = currScriptElem.nextSibling;</Code>
          <Code>var src = currScriptElem.getAttribute("src");</Code>
          <Code>if (src.search("/" + this.ClientID + "/" + this.IATName + "/") != -1)</Code>
          <Code>elem.setAttribute("RelTo", "Test");</Code>
          <Code>else</Code>
          <Code>elem.setAttribute("RelTo", "ContextRoot");</Code>
          <Code>elem.appendChild(xmlDoc.createTextNode(src.match(/[^\/]+$/)));</Code>
          <Code>currScriptElem = currScriptElem.nextSibling;</Code>
          <Code>resourcesElem.appendChild(elem);</Code>
          <Code>}</Code>
          <Code>if (verifiableFiles) {</Code>
          <Code>for (ctr = 0; ctr &lt; verifiableFiles.length; ctr++) {</Code>
          <Code>var filepath;</Code>
          <Code>elem = xmlDoc.createElement("Resource");</Code>
          <Code>elem.setAttribute("RelTo", verifiableFiles[ctr].relTo);</Code>
          <Code>elem.setAttribute("SourceType", verifiableFiles[ctr].sourceType);</Code>
          <Code>elem.appendChild(xmlDoc.createTextNode(verifiableFiles[ctr].filename));</Code>
          <Code>resourcesElem.appendChild(elem);</Code>
          <Code>}</Code>
          <Code>}</Code>
          <Code>xmlDoc.documentElement.appendChild(resourcesElem);</Code>
          <Code>return this.getTextRepresentation(xmlDoc);</Code>
        </FunctionBody>
      </Function>
      <Function FunctionName="recurseElement">
        <Params>
          <Param>elem</Param>
        </Params>
        <FunctionBody>
          <Code>var strRep = "&lt;" + elem.localName;</Code>
          <Code>if (elem.hasAttributes()) {</Code>
          <Code>for (var ctr = 0; ctr &lt; elem.attributes.length; ctr++) {</Code>
          <Code>var attrName = elem.attributes.item(ctr).nodeName;</Code>
          <Code>strRep += " " + attrName + "=\"" + elem.getAttribute(attrName) + "\"";</Code>
          <Code>}</Code>
          <Code>}</Code>
          <Code>strRep += "&gt;\r\n";</Code>
          <Code>if (elem.nodeType == 1) {</Code>
          <Code>for (var ctr = 0; ctr &lt; elem.childNodes.length; ctr++)</Code>
          <Code>if (elem.childNodes[ctr].nodeType == 1)</Code>
          <Code>strRep += this.recurseElement(elem.childNodes[ctr]);</Code>
          <Code>}</Code>
          <Code>for (var ctr = 0; ctr &lt; elem.childNodes.length; ctr++) {</Code>
          <Code>if (elem.childNodes[ctr].nodeType == 3)</Code>
          <Code>strRep += elem.childNodes[ctr].nodeValue;</Code>
          <Code>else if (elem.childNodes[ctr].nodeType == 4)</Code>
          <Code>strRep += "&lt;![CDATA[" + elem.childNodes[ctr].data + "]]&lt;";</Code>
          <Code>}</Code>
          <Code>strRep += "&lt;/" + elem.localName + "&gt;\r\n";</Code>
          <Code>return strRep;</Code>
        </FunctionBody>
      </Function>
      <Function FunctionName="getTextRepresentation">
        <Params>
          <Param>xmlDoc</Param>
        </Params>
        <FunctionBody>
          <Code>var strContent = "&lt;?xml version=\'1.0\' encoding=\'UTF-8\' ?&gt;\r\n";</Code>
          <Code>strContent += this.recurseElement(xmlDoc.documentElement);</Code>
          <Code>return strContent;</Code>
        </FunctionBody>
      </Function>
      <Function FunctionName="processResponse">
        <Params>
          <Param>resp</Param>
          <Param>onAjaxSuccess</Param>
          <Param>functThis</Param>
        </Params>
        <FunctionBody>
          <Code>var respType = resp.documentElement.getAttribute("ResponseType");</Code>
          <Code>var elem;</Code>
          <Code>if (respType == "Error") {</Code>
          <Code>var paramList = resp.documentElement.getElementsByTagName("ErrorParam");</Code>
          <Code>var queryStr = "";</Code>
          <Code>for (var ctr = 0; ctr &lt; paramList.length; ctr++) {</Code>
          <Code>if (ctr != 0)</Code>
          <Code>queryStr += "&amp;";</Code>
          <Code>elem = paramList[ctr].getElementsByTagName("Name")[0];</Code>
          <Code>while (elem.nodeType != 1)</Code>
          <Code>elem = elem.nextSibling;</Code>
          <Code>queryStr += elem.childNodes[0].nodeValue + "=";</Code>
          <Code>elem = paramList[ctr].getElementsByTagName("Value")[0];</Code>
          <Code>while (elem.nodeType != 1)</Code>
          <Code>elem = elem.nextSibling;</Code>
          <Code>queryStr += elem.childNodes[0].nodeValue;</Code>
          <Code>}</Code>
          <Code>window.location.assign("/ServerError.html?" + queryStr);</Code>
          <Code>} else if (respType == "Text") {</Code>
          <Code>elem = resp.documentElement.getElementsByTagName("Response")[0];</Code>
          <Code>elem = elem.firstChild;</Code>
          <Code>while (elem.nodeType != 4)</Code>
          <Code>elem = elem.nextSibling;</Code>
          <Code>if (functThis)</Code>
          <Code>onAjaxSuccess.call(functThis, elem.data);</Code>
          <Code>else</Code>
          <Code>onAjaxSuccess(elem.data);</Code>
          <Code>} else if (respType == "XML") {</Code>
          <Code>elem = resp.documentElement.firstChild;</Code>
          <Code>while (elem.nodeType != 1)</Code>
          <Code>elem = elem.nextSibling;</Code>
          <Code>if (functThis)</Code>
          <Code>onAjaxSuccess.call(functThis, elem);</Code>
          <Code>else</Code>
          <Code>onAjaxSuccess(elem);</Code>
          <Code>}</Code>
        </FunctionBody>
      </Function>
      <Function FunctionName="call">
        <Params>
          <Param>msgBody</Param>
          <Param>onAjaxSuccess</Param>
          <Param>functThis</Param>
        </Params>
        <FunctionBody>
          <Code>var xmlhttp;</Code>
          <Code>if (window.XMLHttpRequest) {</Code>
          <Code>xmlhttp = new XMLHttpRequest();</Code>
          <Code>} else {</Code>
          <Code>xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");</Code>
          <Code>}</Code>
          <Code>_acl = new AjaxCallListener(xmlhttp, this, onAjaxSuccess, functThis);</Code>
          <Code>_acl.startCall(this.DestURL, msgBody);</Code>
        </FunctionBody>
      </Function>
    </PrototypeChain>
  </Class>
  <Class ClassName="AjaxListener">
    <Params>
      <Param>ajaxRequest</Param>
      <Param>ajaxCallObj</Param>
      <Param>successCallback</Param>
      <Param>callbackThis</Param>
    </Params>
    <ConstructorBody>
      <Code>this.AjaxRequest = ajaxRequest;</Code>
      <Code>this.AjaxCallObj = ajaxCallObj;</Code>
      <Code>this.SuccessCallback = successCallback;</Code>
      <Code>this.CallbackThis = callbackThis;</Code>
      <Code>this.timedOut = false;</Code>
    </ConstructorBody>
    <PrototypeChain>
      <Function FunctionName="startCall">
        <Params>
          <Param>destURL</Param>
          <Param>msgBody</Param>
        </Params>
        <FunctionBody>
          <Code>this.AjaxRequest.onreadystatechange = this.onAjaxStateChange;</Code>
          <Code>this.DestURL = destURL;</Code>
          <Code>this.MesssageBody = msgBody;</Code>
          <Code>window.setTimeout(this.timeout, 30000);</Code>
          <Code>this.AjaxCallObj.open("POST", destURL, true);</Code>
          <Code>this.AjaxCallObj.setRequestHeader("AjaxCall", true);</Code>
          <Code>this.AjaxCallObj.setRequestHeader("Content-Type", "text/xml;charset=utf-8");</Code>
          <Code>this.AjaxCallObj.setRequestHeader("Content-length", msgBody.length);</Code>
          <Code>this.AjaxCallObj.send(msgBody);</Code>
        </FunctionBody>
      </Function>
      <Function FunctionName="onAjaxStateChange">
        <FunctionBody>
          <Code>if ((this.AjaxRequest.readyState == 4) &amp;&amp; (this.AjaxRequest.status == 200) &amp;&amp; (!this.timedOut)) {</Code>
          <Code>if (this.CallbackThis)</Code>
          <Code>this.AjaxCallObj.procCall(this.AjaxRequest.responseXML, this.SuccessCallback, this.CallbackThis);</Code>
          <Code>else</Code>
          <Code>this.AjaxCallObj.procCall(this.AjaxRequest.responseXML, this.SuccessCallback);</Code>
          <Code>}</Code>
        </FunctionBody>
      </Function>
      <Function FunctionName="timeout">
        <FunctionBody>
          <Code>this.timedOut = true;</Code>
          <Code>var xmlhttp;</Code>
          <Code>if (window.XMLHttpRequest) {</Code>
          <Code>xmlhttp = new XMLHttpRequest();</Code>
          <Code>} else {</Code>
          <Code>xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");</Code>
          <Code>}</Code>
          <Code>_acl = new AjaxCallListener(xmlhttp, this.AjaxCallObj, this.SuccessCallback, this.CallbackThis);</Code>
          <Code>_acl.startCall(this.DestURL, this.MessageBody);</Code>
        </FunctionBody>
      </Function>
    </PrototypeChain>
  </Class>
</CodeFile>